//
//  NodeEditView.swift
//  prismNg
//
//  Created by AI Assistant on 2025/8/5.
//

import SwiftUI

struct NodeEditView: View {
    @Environment(\.dismiss) private var dismiss
    @Environment(\.modelContext) private var modelContext
    
    @Bindable var node: ThoughtNode
    @State private var editedContent: String
    @State private var selectedNodeType: NodeType
    @State private var selectedEmotionalTags: Set<EmotionalTag> = []
    @State private var emotionalIntensity: Double
    @State private var showingDeleteConfirmation = false
    @State private var showingVoiceInput = false
    
    private let onSave: () -> Void
    private let onDelete: () -> Void
    
    init(node: ThoughtNode, onSave: @escaping () -> Void = {}, onDelete: @escaping () -> Void = {}) {
        self.node = node
        self.onSave = onSave
        self.onDelete = onDelete
        self._editedContent = State(initialValue: node.content)
        self._selectedNodeType = State(initialValue: node.nodeType)
        self._emotionalIntensity = State(initialValue: node.emotionalIntensity)
        self._selectedEmotionalTags = State(initialValue: Set(node.emotionalTags))
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section("Content") {
                    HStack {
                        TextField("Enter your thought...", text: $editedContent, axis: .vertical)
                            .lineLimit(3...10)
                        
                        Button(action: {
                            showingVoiceInput = true
                        }) {
                            Image(systemName: "mic.circle.fill")
                                .font(.title2)
                                .foregroundColor(.blue)
                        }
                    }
                }
                
                Section("Type") {
                    Picker("Node Type", selection: $selectedNodeType) {
                        ForEach(NodeType.allCases, id: \.self) { type in
                            HStack {
                                Image(systemName: nodeTypeIcon(for: type))
                                Text(type.rawValue.capitalized)
                            }
                            .tag(type)
                        }
                    }
                    .pickerStyle(.menu)
                }
                
                Section("Emotional Context") {
                    VStack(alignment: .leading, spacing: 12) {
                        Text("Emotional Intensity")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        
                        HStack {
                            Image(systemName: "face.dashed")
                                .foregroundColor(.secondary)
                            Slider(value: $emotionalIntensity, in: 0...1, step: 0.1)
                            Image(systemName: "face.smiling")
                                .foregroundColor(.primary)
                        }
                        
                        Text("Intensity: \(String(format: "%.1f", emotionalIntensity))")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Text("Emotional Tags")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 8) {
                        ForEach(EmotionalTag.allCases, id: \.self) { tag in
                            EmotionalTagButton(
                                tag: tag,
                                isSelected: selectedEmotionalTags.contains(tag)
                            ) {
                                toggleEmotionalTag(tag)
                            }
                        }
                    }
                }
                
                if node.isAIGenerated {
                    Section("AI Attribution") {
                        Label("Generated by AI", systemImage: "brain.head.profile")
                            .foregroundColor(.blue)
                        
                        if !node.sourceNodeIds.isEmpty {
                            Text("Based on \(node.sourceNodeIds.count) source nodes")
                                .foregroundColor(.secondary)
                                .font(.caption)
                        }
                    }
                }
                
                Section("Metadata") {
                    LabeledContent("Created", value: node.createdAt.formatted())
                    LabeledContent("Updated", value: node.updatedAt.formatted())
                    
                    if let location = node.location {
                        LabeledContent("Location", value: location)
                    }
                    
                    if let weather = node.weather {
                        LabeledContent("Weather", value: weather)
                    }
                }
                
                Section {
                    Button("Delete Node", role: .destructive) {
                        showingDeleteConfirmation = true
                    }
                }
            }
            .navigationTitle("Edit Node")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .confirmationAction) {
                    Button("Save") {
                        saveChanges()
                    }
                    .fontWeight(.semibold)
                    .disabled(editedContent.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                }
            }
            .confirmationDialog(
                "Delete Node",
                isPresented: $showingDeleteConfirmation,
                titleVisibility: .visible
            ) {
                Button("Delete", role: .destructive) {
                    deleteNode()
                }
                Button("Cancel", role: .cancel) { }
            } message: {
                Text("This action cannot be undone.")
            }
            .sheet(isPresented: $showingVoiceInput) {
                VoiceInputView(text: $editedContent, isPresented: $showingVoiceInput) { recognizedText in
                    editedContent = recognizedText
                }
            }
        }
    }
    
    // MARK: - Helper Functions
    
    private func nodeTypeIcon(for type: NodeType) -> String {
        switch type {
        case .thought:
            return "lightbulb"
        case .insight:
            return "star"
        case .question:
            return "questionmark.circle"
        case .conclusion:
            return "checkmark.seal"
        case .contradiction:
            return "exclamationmark.triangle"
        case .structure:
            return "grid"
        }
    }
    
    private func toggleEmotionalTag(_ tag: EmotionalTag) {
        if selectedEmotionalTags.contains(tag) {
            selectedEmotionalTags.remove(tag)
        } else {
            selectedEmotionalTags.insert(tag)
        }
    }
    
    private func saveChanges() {
        node.content = editedContent.trimmingCharacters(in: .whitespacesAndNewlines)
        node.nodeType = selectedNodeType
        node.emotionalTags = Array(selectedEmotionalTags)
        node.emotionalIntensity = emotionalIntensity
        node.updatedAt = Date()
        
        do {
            try modelContext.save()
            onSave()
            dismiss()
        } catch {
            print("Failed to save node: \(error)")
        }
    }
    
    private func deleteNode() {
        modelContext.delete(node)
        
        do {
            try modelContext.save()
            onDelete()
            dismiss()
        } catch {
            print("Failed to delete node: \(error)")
        }
    }
}

// MARK: - Emotional Tag Button

struct EmotionalTagButton: View {
    let tag: EmotionalTag
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 4) {
                Image(systemName: emotionalTagIcon(for: tag))
                    .font(.caption)
                Text(tag.rawValue.capitalized)
                    .font(.caption)
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(
                RoundedRectangle(cornerRadius: 6)
                    .fill(isSelected ? Color.blue : Color.gray.opacity(0.2))
            )
            .foregroundColor(isSelected ? .white : .primary)
        }
        .buttonStyle(.plain)
    }
    
    private func emotionalTagIcon(for tag: EmotionalTag) -> String {
        switch tag {
        case .excited:
            return "star.fill"
        case .calm:
            return "leaf"
        case .confused:
            return "questionmark"
        case .inspired:
            return "lightbulb.fill"
        case .frustrated:
            return "exclamationmark"
        case .curious:
            return "magnifyingglass"
        case .confident:
            return "checkmark"
        case .uncertain:
            return "ellipsis"
        }
    }
}

// MARK: - Node Edit Trigger

struct NodeEditTrigger: ViewModifier {
    @State private var showingEditView = false
    let node: ThoughtNode
    let onSave: () -> Void
    let onDelete: () -> Void
    
    func body(content: Content) -> some View {
        content
            .onTapGesture(count: 2) {
                showingEditView = true
            }
            .sheet(isPresented: $showingEditView) {
                NodeEditView(node: node, onSave: onSave, onDelete: onDelete)
            }
    }
}

extension View {
    func nodeEditTrigger(
        node: ThoughtNode,
        onSave: @escaping () -> Void = {},
        onDelete: @escaping () -> Void = {}
    ) -> some View {
        modifier(NodeEditTrigger(node: node, onSave: onSave, onDelete: onDelete))
    }
}

#Preview {
    let sampleNode = ThoughtNode(
        content: "This is a sample thought for testing the edit view",
        nodeType: .insight,
        position: Position(x: 0, y: 0)
    )
    sampleNode.emotionalTags = [.excited, .curious]
    sampleNode.emotionalIntensity = 0.7
    
    return NodeEditView(node: sampleNode)
        .modelContainer(for: [ThoughtNode.self])
}